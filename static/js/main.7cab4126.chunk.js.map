{"version":3,"sources":["Components/Cards.js","Components/Cardlist.js","Components/SearchBox.js","Components/Scrollbox.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Cards","name","id","email","className","src","alt","Cardlist","robots","map","user","i","key","SearchBox","searchChange","this","props","onChange","type","placeholder","Component","ScrollBox","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","setState","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7cab4126.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\n\r\nconst Cards = ({ name, id, email }) =>\r\n{\r\n//     const {name,id,email} = props;\r\nreturn(\r\n     <div className = 'tc bg-light-green dib br3 pa3 ma2 grow shadow-5'>\r\n         <img src={`https://robohash.org/${id}?200x200`} alt='roboimage'></img>\r\n        <div>\r\n         <h2>{name}</h2>\r\n        <p>{email}</p>\r\n\r\n\r\n\r\n        </div>\r\n     </div>\r\n\r\n\r\n\r\n\r\n);\r\n\r\n}\r\n\r\nexport default Cards;\r\n\r\n","import React from 'react';\r\nimport Cards from './Cards.js';\r\n\r\n\r\n\r\n\r\nconst Cardlist = ({robots}) =>\r\n{\r\n\r\n\r\nreturn(\r\n    <div>{\r\n        \r\n        robots.map((user, i) => {\r\n        return (\r\n            <Cards key={user.id} id={user.id} name={user.name} email={user.email} />\r\n        );\r\n    })}\r\n    \r\n    \r\n    </div>\r\n);\r\n\r\n\r\n\r\n\r\n};\r\n\r\n\r\nexport default Cardlist;\r\n\r\n\r\n","import React, {Component} from 'react';\r\n\r\n\r\n\r\n\r\nclass SearchBox extends Component\r\n{\r\nrender()\r\n{\r\n    \r\nconst {searchChange} = this.props;\r\n    \r\n\r\n\r\nreturn(\r\n\r\n    <div>\r\n\r\n    <input onChange={searchChange} className='pa3 ma3 ba b--green bg-lightest-blue' type='text' placeholder='Search Robot'></input>\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n);\r\n};\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\n\r\nconst ScrollBox = (props) =>\r\n{\r\n\r\n    return(\r\n\r\n        <div style ={{overflow:'scroll', border:'1px solid black', height:'800px'}}>\r\n\r\n            {props.children}\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default ScrollBox;","import React, {Component} from 'react';\r\n\r\n\r\n\r\n\r\nclass ErrorBoundary extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state ={\r\n            hasError:false,\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error,info)\r\n    {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n\r\n    render()\r\n    {\r\n\r\n        if(this.state.hasError)\r\n        return( <h1>Sorry! There is an error</h1> );\r\n        else\r\n        return(this.props.children);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport Cardlist from '../Components/Cardlist.js';\r\nimport SearchBox from '../Components/SearchBox.js';\r\nimport ScrollBox from '../Components/Scrollbox.js';\r\nimport ErrorBoundary from '../Components/ErrorBoundary.js';\r\nimport './App.css'\r\n\r\n\r\n\r\n\r\n\r\nclass App extends Component\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield:'',\r\n        };\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then((response)=>{ return response.json() })\r\n        .then((users)=>{ this.setState({robots : users}) });\r\n\r\n\r\n    }\r\n\r\n    onSearchChange = (event) =>\r\n    {\r\n        this.setState({searchfield:event.target.value});\r\n        \r\n\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n        \r\n        const {robots,searchfield} = this.state;\r\n\r\n\r\n        const filteredRobots = robots.filter((robot) => {\r\n\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\r\n        });\r\n\r\n        if (!robots.length)\r\n        {\r\n            return(<h1>Loading</h1>);\r\n        }\r\n\r\n        else\r\n        {\r\n\r\n\r\n    return(\r\n        <div className='tc'>\r\n        <h1 className='f1'>Robofriends</h1>\r\n        <SearchBox searchChange = {this.onSearchChange}/>\r\n\r\n        <ScrollBox>\r\n            <ErrorBoundary>\r\n        <Cardlist robots={filteredRobots}/>\r\n                </ErrorBoundary>\r\n            </ScrollBox>\r\n        </div>\r\n\r\n\r\n\r\n    );\r\n        }\r\n             }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App.js'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https:bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}